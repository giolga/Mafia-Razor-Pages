<style>
    .header h1, p {
        text-align: center;
    }

    .wheel {
        display: flex;
        justify-content: center;
        position: relative;
    }

    .center-circle {
        width: 100px;
        height: 100px;
        border-radius: 60px;
        background-color: #fff;
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        cursor: pointer;
    }

    .triangle {
        width: 0;
        height: 0;
        border-top: 10px solid transparent;
        border-bottom: 10px solid transparent;
        border-right: 30px solid white;
        position: absolute;
        top: 50%;
        right: -220%;
        transform: translateY(-50%);
    }

    input {
        background-color: rgba(20, 20, 20, 0.2);
        caret-color: #fff;
        resize: none;
        color: #fff;
    }

    .inputArea {
        display: flex;
        justify-content: center;
        margin-top: 40px;
    }
</style>

<div class="character-right-section">
    <div class="header">
        <h1>WINNER</h1>
        <p id="winner">NONE</p>
    </div>

    <div class="wheel">
        <canvas class="" id="canvas" width="300" height="300"></canvas>
        <div class="center-circle" onclick="spin()">
            <div class="triangle"></div>
        </div>

    </div>
</div>


<script>
    // Helper functions
    function randomColor() {
        const r = Math.floor(Math.random() * 255);
        const g = Math.floor(Math.random() * 255);
        const b = Math.floor(Math.random() * 255);
        return { r, g, b };
    }

    function toRad(deg) {
        return deg * (Math.PI / 180.0);
    }

    function randomRange(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    function easeOutSine(x) {
        return Math.sin((x * Math.PI) / 2);
    }

    function getPercent(input, min, max) {
        return (((input - min) * 100) / (max - min)) / 100;
    }

    function normalizeAngle(angle) {
        return ((angle % 360) + 360) % 360;
    }

    // Canvas setup
    const canvas = document.getElementById("canvas");
    const ctx = canvas.getContext("2d");
    const width = canvas.width;
    const height = canvas.height;
    const centerX = width / 2;
    const centerY = height / 2;
    const radius = width / 2;

    // Wheel state
    let items = @Json.Serialize(Model.Characters);
    let currentDeg = 0;
    let step = 360 / items.length;
    let colors = [];
    let itemDegs = {};
    let speed = 0;
    let maxRotation = randomRange(360 * 3, 360 * 6);
    let pause = false;

    // Initialize colors
    for (let i = 0; i < items.length + 1; i++) {
        colors.push(randomColor());
    }

    function getWinningSegment() {
        // The triangle points at 0 degrees
        const pointerAngle = normalizeAngle(-currentDeg);

        for (let i = 0; i < items.length; i++) {
            const startDeg = normalizeAngle(i * step);
            const endDeg = normalizeAngle((i + 1) * step);

            if (startDeg > endDeg) {
                if (pointerAngle >= startDeg || pointerAngle <= endDeg) {
                    return { item: items[i], index: i };
                }
            } else {
                if (pointerAngle >= startDeg && pointerAngle <= endDeg) {
                    return { item: items[i], index: i };
                }
            }
        }
        return null;
    }

    function draw() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        // Draw background circle
        ctx.beginPath();
        ctx.arc(centerX, centerY, radius, toRad(0), toRad(360));
        ctx.fillStyle = `rgb(33,33,33)`;
        ctx.lineTo(centerX, centerY);
        ctx.fill();

        let startDeg = currentDeg;

        for (let i = 0; i < items.length; i++) {
            let endDeg = startDeg + step;
            const color = colors[i];

            // Draw outer segment
            ctx.beginPath();
            ctx.arc(centerX, centerY, radius - 2, toRad(startDeg), toRad(endDeg));
            ctx.fillStyle = `rgb(${color.r - 30},${color.g - 30},${color.b - 30})`;
            ctx.lineTo(centerX, centerY);
            ctx.fill();

            // Draw inner segment
            ctx.beginPath();
            ctx.arc(centerX, centerY, radius - 30, toRad(startDeg), toRad(endDeg));
            ctx.fillStyle = `rgb(${color.r},${color.g},${color.b})`;
            ctx.lineTo(centerX, centerY);
            ctx.fill();

            // Draw text
            ctx.save();
            ctx.translate(centerX, centerY);
            ctx.rotate(toRad((startDeg + endDeg) / 2));
            ctx.textAlign = "center";
            ctx.fillStyle = color.r > 150 || color.g > 150 || color.b > 150 ? "#000" : "#fff";
            ctx.font = 'bold 24px serif';
            ctx.fillText(items[i], 130, 10);
            ctx.restore();

            itemDegs[items[i]] = {
                startDeg: startDeg,
                endDeg: endDeg
            };

            startDeg = endDeg;
        }
    }

    function animate() {
        if (pause) {
            if (speed === 0) {
                const winningSegment = getWinningSegment();
                if (winningSegment) {
                    document.getElementById("winner").innerHTML = winningSegment.item;
                    items.splice(winningSegment.index, 1);
                    createWheel();
                }
            }
            return;
        }

        speed = easeOutSine(getPercent(currentDeg, maxRotation, 0)) * 20;
        if (speed < 0.01) {
            speed = 0;
            pause = true;
        }

        currentDeg += speed;
        draw();
        window.requestAnimationFrame(animate);
    }

    // Create/update wheel
    function createWheel() {
        const inputValue = document.getElementsByClassName('character-input')[0].value;
        if (inputValue.trim()) {
            items.push(inputValue.trim());
            document.getElementsByClassName('character-input')[0].value = '';
        }

        step = 360 / items.length;
        colors = [];
        for (let i = 0; i < items.length; i++) {
            colors.push(randomColor());
        }
        draw();
    }

    // Spin function
    function spin() {
        if (items.length === 1) {
            const lastItem = items[0];
            document.getElementById("winner").innerHTML = lastItem;
            // alert(`Winner is: ${lastItem}! The wheel is now empty.`);
            items.splice(0, 1); // Remove the last item
            draw(); // Redraw the wheel to show it's empty
            return; // Exit the function
        }


        if (speed !== 0) {
            return;
        }

        if (items.length === 0) {
            alert("Add items to the wheel first!");
            return;
        }

        const randomItem = items[Math.floor(Math.random() * items.length)];
        const targetDeg = (itemDegs[randomItem].startDeg + itemDegs[randomItem].endDeg) / 2;
        maxRotation = 360 * 5 + 360 - targetDeg;

        currentDeg = 0;
        pause = false;

        window.requestAnimationFrame(animate);
    }

    // Initial draw
    draw();

</script>
